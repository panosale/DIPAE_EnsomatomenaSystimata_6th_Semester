CCS PCH C Compiler, Version 5.011, 5967               14-Μαϊ-25 00:50

               Filename:   F:\Common\Programming\GitHub\DIPAE_EnsomatomenaSystimata_6th_Term\AskisisTheorias\Askisi4b\Askisi4b.lst

               ROM used:   380 bytes (1%)
                           Largest free fragment is 32384
               RAM used:   23 (1%) at main() level
                           28 (1%) worst case
               Stack used: 3 locations (1 in main + 2 for interrupts)
               Stack size: 31

*
0000:  GOTO   0152
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF0.3
004A:  GOTO   0054
004E:  BTFSC  FF0.0
0050:  GOTO   00C2
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Askisi theorias 4a 
.................... #include <main_.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... //#FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
0096:  CLRF   FEA
0098:  MOVLW  1B
009A:  MOVWF  FE9
009C:  MOVF   FEF,W
009E:  BZ    00C0
00A0:  MOVLW  0F
00A2:  MOVWF  01
00A4:  MOVLW  BF
00A6:  MOVWF  00
00A8:  CLRWDT
00AA:  DECFSZ 00,F
00AC:  BRA    00A8
00AE:  DECFSZ 01,F
00B0:  BRA    00A4
00B2:  MOVLW  8F
00B4:  MOVWF  00
00B6:  DECFSZ 00,F
00B8:  BRA    00B6
00BA:  CLRWDT
00BC:  DECFSZ FEF,F
00BE:  BRA    00A0
00C0:  RETURN 0
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#build (reset=0x800, interrupt=0x808) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#org 0, 0x7FF {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
.................... // Gia oso einai patimeno to BUTTON afksanei to PORTB kata 1 mexri na ftasei sto 0xff (255) 
.................... // Molis afisoume to BUTTON meionei to PORTB kata 1 mexri na ftasei sto 0x0 (0) 
.................... #use standard_io ( A ) 
.................... //#use standard_io ( B ) 
.................... #use standard_io ( C ) 
.................... #byte PORTA =0xF80 
.................... #byte PORTB =0xF81 
.................... #byte PORTC =0xF82 
.................... #byte PORTD =0xF83 
.................... #byte PORTE =0xF84 
....................  
.................... const int16 DEFAULT_DELAY = 500; 
....................  
.................... void push_button(void); 
.................... // INTERRUPTS HANDLING 
.................... void init(void); 
.................... void eksoteriki_diakopi1(); 
....................  
.................... void main() 
*
0152:  CLRF   FF8
0154:  BCF    FD0.7
0156:  BSF    07.7
0158:  MOVF   FC1,W
015A:  ANDLW  C0
015C:  IORLW  0F
015E:  MOVWF  FC1
0160:  MOVLW  07
0162:  MOVWF  FB4
.................... { 
....................    init(); 
0164:  BRA    013C
....................    while(TRUE) { 
....................       PORTD = PORTD ^ 0xff; 
0166:  MOVLW  FF
0168:  XORWF  F83,F
016A:  CLRF   16
016C:  BTFSC  FF2.7
016E:  BSF    16.7
0170:  BCF    FF2.7
....................       delay_ms(100); 
0172:  MOVLW  64
0174:  MOVWF  1B
0176:  RCALL  0096
0178:  BTFSC  16.7
017A:  BSF    FF2.7
017C:  BRA    0166
....................    } 
.................... } 
....................  
017E:  SLEEP 
.................... void push_button(void { // Synartisi elegxou patimatos-apeleftherosis tou BUTTON 
....................    while (input(PIN_B4) == 1) {} // To PORT kai to PIN mporoun na allaksoun analoga tin anagki 
....................    delay_ms(50); // Eksalipsi fainomenou anapidisis 
....................    while (input(PIN_B4) == 0) {} // To PORT kai to PIN mporoun na allaksoun analoga tin anagki 
....................    delay_ms(50); // Eksalipsi fainomenou anapidisis   
.................... } 
....................  
.................... void init(void) { 
....................    set_tris_b(0xff); // Ορίζουμε τη θύρα B σαν ΕΙΣΟΔΟ (0) 
*
013C:  MOVLW  FF
013E:  MOVWF  F93
....................    set_tris_d(0x00); // Ορίζουμε τη θύρα D σαν ΕΞΟΔΟ (1) 
0140:  MOVLW  00
0142:  MOVWF  F95
....................    PORTD = 0x0;    
0144:  CLRF   F83
....................    // Arxikopoiisi interrups 
....................    enable_interrupts(GLOBAL); 
0146:  MOVLW  C0
0148:  IORWF  FF2,F
....................    enable_interrupts(INT_EXT1); 
014A:  BSF    FF0.3
....................    ext_int_edge(1, H_TO_L); 
014C:  BCF    FF1.5
014E:  GOTO   0166 (RETURN)
....................     
.................... } 
....................  
.................... // INTERRUPTS HANDLING 
.................... #INT_EXT1 
.................... void eksoteriki_diakopi1() { 
....................    int i; 
....................    PORTD = 0x0; 
*
00C2:  CLRF   F83
....................    int8 dot_position = 0x80; 
00C4:  MOVLW  80
00C6:  MOVWF  19
....................    for (i = 0; i < 8; i++) { 
00C8:  CLRF   18
00CA:  MOVF   18,W
00CC:  SUBLW  07
00CE:  BNC   00FC
....................       PORTD = PORTD ^ dot_position; 
00D0:  MOVF   19,W
00D2:  XORWF  F83,F
....................       delay_ms(DEFAULT_DELAY); 
00D4:  MOVLW  02
00D6:  MOVWF  1A
00D8:  MOVLW  FA
00DA:  MOVWF  1B
00DC:  RCALL  0096
00DE:  DECFSZ 1A,F
00E0:  BRA    00D8
....................       PORTD = PORTD ^ dot_position; 
00E2:  MOVF   19,W
00E4:  XORWF  F83,F
....................       delay_ms(DEFAULT_DELAY); 
00E6:  MOVLW  02
00E8:  MOVWF  1A
00EA:  MOVLW  FA
00EC:  MOVWF  1B
00EE:  RCALL  0096
00F0:  DECFSZ 1A,F
00F2:  BRA    00EA
....................       dot_position = dot_position / 2; 
00F4:  BCF    FD8.0
00F6:  RRCF   19,F
00F8:  INCF   18,F
00FA:  BRA    00CA
....................    } 
....................    dot_position = 1; 
00FC:  MOVLW  01
00FE:  MOVWF  19
.................... //   PORTD = PORTD ^ dot_position; 
.................... //   delay_ms(500); 
....................    for (i = 0; i < 8; i++) { 
0100:  CLRF   18
0102:  MOVF   18,W
0104:  SUBLW  07
0106:  BNC   0134
....................       PORTD = PORTD ^ dot_position; 
0108:  MOVF   19,W
010A:  XORWF  F83,F
....................       delay_ms(DEFAULT_DELAY); 
010C:  MOVLW  02
010E:  MOVWF  1A
0110:  MOVLW  FA
0112:  MOVWF  1B
0114:  RCALL  0096
0116:  DECFSZ 1A,F
0118:  BRA    0110
....................       PORTD = PORTD ^ dot_position; 
011A:  MOVF   19,W
011C:  XORWF  F83,F
....................       delay_ms(DEFAULT_DELAY); 
011E:  MOVLW  02
0120:  MOVWF  1A
0122:  MOVLW  FA
0124:  MOVWF  1B
0126:  RCALL  0096
0128:  DECFSZ 1A,F
012A:  BRA    0122
....................       dot_position = dot_position * 2; 
012C:  BCF    FD8.0
012E:  RLCF   19,F
0130:  INCF   18,F
0132:  BRA    0102
....................    } 
....................    PORTD = 0x0; 
0134:  CLRF   F83
0136:  BCF    FF0.0
0138:  GOTO   0054
.................... } 
....................  

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
