CCS PCH C Compiler, Version 5.011, 5967               08-Απρ-25 23:14

               Filename:   F:\Common\Programming\GitHub\DIPAE_EnsomatomenaSystimata_6th_Term\Askisi5\Askisi5.1\askisi5_1.lst

               ROM used:   868 bytes (3%)
                           Largest free fragment is 31896
               RAM used:   52 (3%) at main() level
                           65 (3%) worst case
               Stack used: 3 locations (1 in main + 2 for interrupts)
               Stack size: 31

*
0000:  GOTO   02C0
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.5
004A:  GOTO   0054
004E:  BTFSC  FF2.2
0050:  GOTO   0120
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // DIPAE - Enosmatomena Systimata - 6o Eksamino 
.................... // Alevropoulos Panagiotis 
.................... // AM: 2022005 
.................... // Askisi: 5.1 
.................... #include <main_.h> // Gia ektelesi se Proteus 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
0096:  CLRF   01
0098:  CLRF   02
009A:  CLRF   00
009C:  CLRF   03
009E:  MOVF   3F,W
00A0:  BNZ   00A6
00A2:  MOVF   3E,W
00A4:  BZ    00D6
00A6:  MOVLW  10
00A8:  MOVWF  40
00AA:  BCF    FD8.0
00AC:  RLCF   3C,F
00AE:  RLCF   3D,F
00B0:  RLCF   00,F
00B2:  RLCF   03,F
00B4:  MOVF   3F,W
00B6:  SUBWF  03,W
00B8:  BNZ   00BE
00BA:  MOVF   3E,W
00BC:  SUBWF  00,W
00BE:  BNC   00CE
00C0:  MOVF   3E,W
00C2:  SUBWF  00,F
00C4:  BTFSS  FD8.0
00C6:  DECF   03,F
00C8:  MOVF   3F,W
00CA:  SUBWF  03,F
00CC:  BSF    FD8.0
00CE:  RLCF   01,F
00D0:  RLCF   02,F
00D2:  DECFSZ 40,F
00D4:  BRA    00AA
00D6:  RETURN 0
00D8:  MOVF   3C,W
00DA:  MULWF  3E
00DC:  MOVFF  FF3,01
00E0:  MOVFF  FF4,00
00E4:  MULWF  3F
00E6:  MOVF   FF3,W
00E8:  ADDWF  00,F
00EA:  MOVF   3D,W
00EC:  MULWF  3E
00EE:  MOVF   FF3,W
00F0:  ADDWFC 00,W
00F2:  MOVWF  02
00F4:  RETURN 0
00F6:  MOVF   3B,W
00F8:  CLRF   01
00FA:  SUBWF  3A,W
00FC:  BC    0104
00FE:  MOVFF  3A,00
0102:  BRA    011C
0104:  CLRF   00
0106:  MOVLW  08
0108:  MOVWF  3C
010A:  RLCF   3A,F
010C:  RLCF   00,F
010E:  MOVF   3B,W
0110:  SUBWF  00,W
0112:  BTFSC  FD8.0
0114:  MOVWF  00
0116:  RLCF   01,F
0118:  DECFSZ 3C,F
011A:  BRA    010A
011C:  GOTO   0228 (RETURN)
....................  
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... //#FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#build (reset=0x800, interrupt=0x808) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#org 0, 0x7FF {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
.................... //#include <main.h> // Gia ektelesi se PIC 
....................  
.................... // Standard Eisodoi & Eksodoi 
.................... #use standard_io (A) 
.................... #use standard_io (B) 
.................... #use standard_io (C) 
....................  
.................... // Orismos ton thiron me ti thesi tous sti mnimi 
.................... #byte PORTA =0xF80 
.................... #byte PORTB =0xF81 
.................... #byte PORTC =0xF82 
.................... #byte PORTD =0xF83 
.................... #byte PORTE =0xF84 
....................  
.................... const int16 timer_start_value = 5536; // Orismos arxikis timis timer0; 
....................  
.................... int8 des = 0; 
.................... int16 seconds = 300; 
.................... int16 counter = 200; 
.................... int1 flag1 = 0; 
.................... int1 flag2 = 0; 
.................... int8 aux_counter = 5; 
.................... int8 var_counter = 5; 
.................... int16 temp_var = 0; 
....................  
.................... // Dilosi pinaka katastaseon Endeikti 7 tomeon koinis kathodou 
.................... int8 table[16] = {0x3f, // 0b00111111 -> 0 
....................                   0x06, // 0b00000110 -> 1 
....................                   0x5b, // 0b01011011 -> 2 
....................                   0x4f, // 0b01001111 -> 3 
....................                   0x66, // 0b01100110 -> 4 
....................                   0x6d, // 0b01101101 -> 5 
....................                   0x7d, // 0b01111101 -> 6 
....................                   0x07, // 0b00000111 -> 7 
....................                   0x7f, // 0b01111111 -> 8 
....................                   0x6f, // 0b01101111 -> 9 
....................                   0x77, // 0b01110111 -> A 
....................                   0x7c, // 0b01111100 -> b 
....................                   0x39, // 0b00111001 -> C 
....................                   0x5e, // 0b01011110 -> d 
....................                   0x79, // 0b01111001 -> E 
....................                   0x71}; // 0b01110001 -> F 
....................  
.................... // Dilosi pinaka tranzistor gia energopoiisis tou PORTC 
.................... int8 dig[3] = {1, 2, 4}; 
....................  
.................... // Dilosi sinartiseon eksipiretisis 
.................... void timer0_int(void); 
.................... void init(void); 
....................  
.................... void main() { 
*
02C0:  CLRF   FF8
02C2:  BCF    FD0.7
02C4:  BSF    07.7
02C6:  CLRF   16
02C8:  MOVLW  01
02CA:  MOVWF  18
02CC:  MOVLW  2C
02CE:  MOVWF  17
02D0:  CLRF   1A
02D2:  MOVLW  C8
02D4:  MOVWF  19
02D6:  BCF    1B.0
02D8:  BCF    1B.1
02DA:  MOVLW  05
02DC:  MOVWF  1C
02DE:  MOVWF  1D
02E0:  CLRF   1F
02E2:  CLRF   1E
02E4:  MOVF   FC1,W
02E6:  ANDLW  C0
02E8:  IORLW  0F
02EA:  MOVWF  FC1
02EC:  MOVLW  07
02EE:  MOVWF  FB4
02F0:  MOVLW  3F
02F2:  MOVWF  20
02F4:  MOVLW  06
02F6:  MOVWF  21
02F8:  MOVLW  5B
02FA:  MOVWF  22
02FC:  MOVLW  4F
02FE:  MOVWF  23
0300:  MOVLW  66
0302:  MOVWF  24
0304:  MOVLW  6D
0306:  MOVWF  25
0308:  MOVLW  7D
030A:  MOVWF  26
030C:  MOVLW  07
030E:  MOVWF  27
0310:  MOVLW  7F
0312:  MOVWF  28
0314:  MOVLW  6F
0316:  MOVWF  29
0318:  MOVLW  77
031A:  MOVWF  2A
031C:  MOVLW  7C
031E:  MOVWF  2B
0320:  MOVLW  39
0322:  MOVWF  2C
0324:  MOVLW  5E
0326:  MOVWF  2D
0328:  MOVLW  79
032A:  MOVWF  2E
032C:  MOVLW  71
032E:  MOVWF  2F
0330:  MOVLW  01
0332:  MOVWF  30
0334:  MOVLW  02
0336:  MOVWF  31
0338:  MOVLW  04
033A:  MOVWF  32
....................    init(); 
033C:  BRA    0282
....................    while (TRUE) { 
....................       if (bit_test(PORTD,1) == 1){ 
033E:  BTFSS  F83.1
0340:  BRA    0346
....................          flag1 = 1;  
0342:  BSF    1B.0
....................       } 
0344:  BRA    0348
....................       else { 
....................          flag1 = 0; 
0346:  BCF    1B.0
....................       } 
....................       if (bit_test(PORTD,3) == 0) { 
0348:  BTFSC  F83.3
034A:  BRA    0354
....................          seconds = 300;  
034C:  MOVLW  01
034E:  MOVWF  18
0350:  MOVLW  2C
0352:  MOVWF  17
....................       } 
....................       if (bit_test(PORTD,0) == 0) { 
0354:  BTFSC  F83.0
0356:  BRA    0364
....................          temp_var = seconds; 
0358:  MOVFF  18,1F
035C:  MOVFF  17,1E
....................          output_high(PIN_D4); // Endeiksi sto LED sto PIN_D4 oti apothikeftike i timi tou xronometrou  
0360:  BCF    F95.4
0362:  BSF    F8C.4
....................       } 
0364:  BRA    033E
....................    } 
.................... }    
....................  
.................... #INT_TIMER0 
.................... void timer0_int(void) { 
0366:  SLEEP 
....................    int16 mon, dec, eka; 
....................    counter--; // Kathe 200 * 5msec = 1sec 
*
0120:  MOVF   19,W
0122:  BTFSC  FD8.2
0124:  DECF   1A,F
0126:  DECF   19,F
....................    if ((counter == 0)) { 
0128:  MOVF   19,F
012A:  BNZ   0186
012C:  MOVF   1A,F
012E:  BNZ   0186
....................       counter = 200;//200 
0130:  CLRF   1A
0132:  MOVLW  C8
0134:  MOVWF  19
....................       if ((flag1 == 0) && (flag2 == 0)) { 
0136:  BTFSC  1B.0
0138:  BRA    0146
013A:  BTFSC  1B.1
013C:  BRA    0146
....................          seconds--; // Meionei kathe 1 sec 
013E:  MOVF   17,W
0140:  BTFSC  FD8.2
0142:  DECF   18,F
0144:  DECF   17,F
....................       }             
....................       if ((seconds == 280) && (aux_counter > 0)){ 
0146:  MOVF   17,W
0148:  SUBLW  18
014A:  BNZ   0160
014C:  DECFSZ 18,W
014E:  BRA    0160
0150:  MOVF   1C,F
0152:  BZ    0160
....................          seconds = 280; 
0154:  MOVLW  01
0156:  MOVWF  18
0158:  MOVLW  18
015A:  MOVWF  17
....................          aux_counter--; 
015C:  DECF   1C,F
....................          flag2 = 1; 
015E:  BSF    1B.1
....................       }   
....................       if (aux_counter == 0) { 
0160:  MOVF   1C,F
0162:  BNZ   016E
....................          var_counter--; 
0164:  DECF   1D,F
....................          seconds = temp_var; 
0166:  MOVFF  1F,18
016A:  MOVFF  1E,17
....................       } 
....................       if (var_counter == 0) {  
016E:  MOVF   1D,F
0170:  BNZ   0186
....................          aux_counter = 5; 
0172:  MOVLW  05
0174:  MOVWF  1C
....................          var_counter = 5; 
0176:  MOVWF  1D
....................          flag2 = 0; 
0178:  BCF    1B.1
....................          seconds = 300; 
017A:  MOVLW  01
017C:  MOVWF  18
017E:  MOVLW  2C
0180:  MOVWF  17
....................          output_low(PIN_D4); // Midenismos endeiksis LED sto PIN_D4 (Endeiksi oti apothikeftike i timi tou xronometrou) 
0182:  BCF    F95.4
0184:  BCF    F8C.4
....................       }                   
....................                                                      
....................    }                    
....................                       
....................    eka = (int8) (seconds / 100); 
0186:  MOVFF  18,3D
018A:  MOVFF  17,3C
018E:  CLRF   3F
0190:  MOVLW  64
0192:  MOVWF  3E
0194:  RCALL  0096
0196:  MOVFF  02,39
019A:  MOVFF  01,38
....................    dec = (int8) ((seconds - (100 * eka)) / 10); 
019E:  CLRF   3D
01A0:  MOVLW  64
01A2:  MOVWF  3C
01A4:  MOVFF  39,3F
01A8:  MOVFF  38,3E
01AC:  RCALL  00D8
01AE:  MOVFF  02,03
01B2:  MOVF   01,W
01B4:  SUBWF  17,W
01B6:  MOVWF  3A
01B8:  MOVF   02,W
01BA:  SUBWFB 18,W
01BC:  MOVWF  3B
01BE:  MOVWF  3D
01C0:  MOVFF  3A,3C
01C4:  CLRF   3F
01C6:  MOVLW  0A
01C8:  MOVWF  3E
01CA:  RCALL  0096
01CC:  MOVFF  02,37
01D0:  MOVFF  01,36
....................    mon = (int8) (seconds - (100 * eka) - (10 * dec)); 
01D4:  CLRF   3D
01D6:  MOVLW  64
01D8:  MOVWF  3C
01DA:  MOVFF  39,3F
01DE:  MOVFF  38,3E
01E2:  RCALL  00D8
01E4:  MOVFF  02,03
01E8:  MOVF   01,W
01EA:  SUBWF  17,W
01EC:  MOVWF  3A
01EE:  MOVF   02,W
01F0:  SUBWFB 18,W
01F2:  MOVWF  3B
01F4:  CLRF   3D
01F6:  MOVLW  0A
01F8:  MOVWF  3C
01FA:  MOVFF  37,3F
01FE:  MOVFF  36,3E
0202:  RCALL  00D8
0204:  MOVF   01,W
0206:  SUBWF  3A,W
0208:  MOVWF  00
020A:  MOVF   02,W
020C:  SUBWFB 3B,W
020E:  MOVF   00,W
0210:  CLRF   35
0212:  MOVWF  34
....................    set_timer0(timer_start_value); // Arxiki timi tou metriti 
0214:  MOVLW  15
0216:  MOVWF  FD7
0218:  MOVLW  A0
021A:  MOVWF  FD6
....................    des = ++des%3; 
021C:  INCF   16,F
021E:  MOVFF  16,3A
0222:  MOVLW  03
0224:  MOVWF  3B
0226:  BRA    00F6
0228:  MOVFF  00,16
....................    PORTC = dig[des]; 
022C:  CLRF   03
022E:  MOVF   16,W
0230:  ADDLW  30
0232:  MOVWF  FE9
0234:  MOVLW  00
0236:  ADDWFC 03,W
0238:  MOVWF  FEA
023A:  MOVFF  FEF,F82
....................    if (des==0) { 
023E:  MOVF   16,F
0240:  BNZ   0252
....................       PORTB = table[mon]; 
0242:  MOVLW  20
0244:  ADDWF  34,W
0246:  MOVWF  FE9
0248:  MOVLW  00
024A:  ADDWFC 35,W
024C:  MOVWF  FEA
024E:  MOVFF  FEF,F81
....................    }    
....................    if (des==1){ 
0252:  DECFSZ 16,W
0254:  BRA    0266
....................       PORTB = table[dec]; 
0256:  MOVLW  20
0258:  ADDWF  36,W
025A:  MOVWF  FE9
025C:  MOVLW  00
025E:  ADDWFC 37,W
0260:  MOVWF  FEA
0262:  MOVFF  FEF,F81
....................    }             
....................    if (des==2) { 
0266:  MOVF   16,W
0268:  SUBLW  02
026A:  BNZ   027C
....................       PORTB = table[eka]; 
026C:  MOVLW  20
026E:  ADDWF  38,W
0270:  MOVWF  FE9
0272:  MOVLW  00
0274:  ADDWFC 39,W
0276:  MOVWF  FEA
0278:  MOVFF  FEF,F81
....................    } 
027C:  BCF    FF2.2
027E:  GOTO   0054
.................... } 
....................  
.................... void init(void) { 
....................    set_tris_b(0x00); // Orismos tou PORTB san eksodo (0) 
0282:  MOVLW  00
0284:  MOVWF  F93
....................    set_tris_c(0x00); // Orismos tou PORTBC PIN2 san eksodo (1) gia ti geiosi tou Endeikti 
0286:  MOVWF  F94
....................    set_tris_d(0x0f); // Orismos tou LSB tou PORTD san eisodo (1) kai tou MSB san eksodo  
0288:  MOVLW  0F
028A:  MOVWF  F95
....................    PORTB = 0; 
028C:  CLRF   F81
....................    PORTC = 0; 
028E:  CLRF   F82
....................    output_low(PIN_D4); // Midenismos endeiksis LED sto PIN_D4 (Endeiksi oti apothikeftike i timi tou xronometrou)  
0290:  BCF    F95.4
0292:  BCF    F8C.4
....................    counter = 200; // Arxikopoiisi tou counter 
0294:  CLRF   1A
0296:  MOVLW  C8
0298:  MOVWF  19
....................    seconds = 300; // Arxikopoiisi tou metriti xronou 
029A:  MOVLW  01
029C:  MOVWF  18
029E:  MOVLW  2C
02A0:  MOVWF  17
....................    aux_counter = 5; 
02A2:  MOVLW  05
02A4:  MOVWF  1C
....................    var_counter = 5; 
02A6:  MOVWF  1D
....................    des = 0; // Arxikopoiisi tis epilogis psifiou 
02A8:  CLRF   16
....................    SETUP_TIMER_0(T0_INTERNAL | T0_DIV_1); 
02AA:  MOVLW  88
02AC:  MOVWF  FD5
....................    set_timer0(timer_start_value); 
02AE:  MOVLW  15
02B0:  MOVWF  FD7
02B2:  MOVLW  A0
02B4:  MOVWF  FD6
....................    enable_interrupts(INT_TIMER0); 
02B6:  BSF    FF2.5
....................    enable_interrupts(GLOBAL); // Energopoiisi genikou diakopti diakopon 
02B8:  MOVLW  C0
02BA:  IORWF  FF2,F
02BC:  GOTO   033E (RETURN)
.................... } 
....................  

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
