CCS PCH C Compiler, Version 5.011, 5967               28-Απρ-25 23:43

               Filename:   F:\Common\Programming\GitHub\DIPAE_EnsomatomenaSystimata_6th_Term\Askisi5\Askisi5.2\askisi5_2.lst

               ROM used:   754 bytes (2%)
                           Largest free fragment is 32010
               RAM used:   47 (2%) at main() level
                           58 (3%) worst case
               Stack used: 3 locations (1 in main + 2 for interrupts)
               Stack size: 31

*
0000:  GOTO   0286
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.5
004A:  GOTO   0054
004E:  BTFSC  FF2.2
0050:  GOTO   00DC
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include <main_.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
0096:  MOVF   36,W
0098:  CLRF   01
009A:  SUBWF  35,W
009C:  BC    00A4
009E:  MOVFF  35,00
00A2:  BRA    00BC
00A4:  CLRF   00
00A6:  MOVLW  08
00A8:  MOVWF  37
00AA:  RLCF   35,F
00AC:  RLCF   00,F
00AE:  MOVF   36,W
00B0:  SUBWF  00,W
00B2:  BTFSC  FD8.0
00B4:  MOVWF  00
00B6:  RLCF   01,F
00B8:  DECFSZ 37,F
00BA:  BRA    00AA
00BC:  RETURN 0
00BE:  MOVF   35,W
00C0:  MULWF  37
00C2:  MOVFF  FF3,01
00C6:  MOVFF  FF4,00
00CA:  MULWF  38
00CC:  MOVF   FF3,W
00CE:  ADDWF  00,F
00D0:  MOVF   36,W
00D2:  MULWF  37
00D4:  MOVF   FF3,W
00D6:  ADDWFC 00,W
00D8:  MOVWF  02
00DA:  RETURN 0
....................  
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... //#FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#build (reset=0x800, interrupt=0x808) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#org 0, 0x7FF {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
....................  
.................... // StandaEisodoi & Eksodoi 
.................... #use standard_io (A)  
.................... #use standard_io (B) 
.................... #use standard_io (C) 
....................  
.................... // Orismos ton thiron me ti thesi tous sti mnimi 
.................... #byte PORTA         =0xF80     
.................... #byte PORTB         =0xF81 
.................... #byte PORTC         =0xF82 
.................... #byte PORTD         =0xF83 
.................... #byte PORTE         =0xF84 
....................  
.................... const int16 timer_start_value = 5536; // Orismos arxikis timis timer0; 
....................  
.................... // Orismos global metavliton 
.................... int8 des=0; 
.................... int8 seconds=0; 
.................... //int8 sec_set_counter = 20; 
.................... int8 minute=0; 
.................... int8 hour=12; 
.................... int8 counter; 
.................... int1 flag=0; 
....................  
.................... // Dilosi pinaka katastaseon Endeikti 7 tomeon koinis kathodou 
.................... int8 table[16] = {0b00111111, //0 
....................                   0b00000110, //1 
....................                   0b01011011, //2 
....................                   0b01001111, //3 
....................                   0b01100110, //4 
....................                   0b01101101, //5 
....................                   0b01111101, //6 
....................                   0b00000111, //7 
....................                   0b01111111, //8 
....................                   0b01101111, //9 
....................                   0b01101011, //Ω 
....................                   0b00110111, //Π 
....................                   0b00111001,  
....................                   0b01011110,  
....................                   0b01111001,  
....................                   0b01110001 };   
....................  
.................... // Dilosi pinaka tranzistor gia energopoiisis tou PORTC 
.................... int8 dig[3] = {1,2,4}; 
....................  
.................... // Dilosi sinartiseon eksipiretisis 
.................... void timer0_int(void); 
.................... void init (void); 
....................  
.................... void main() { 
*
0286:  CLRF   FF8
0288:  BCF    FD0.7
028A:  BSF    07.7
028C:  CLRF   16
028E:  CLRF   17
0290:  CLRF   18
0292:  MOVLW  0C
0294:  MOVWF  19
0296:  BCF    1B.0
0298:  MOVF   FC1,W
029A:  ANDLW  C0
029C:  IORLW  0F
029E:  MOVWF  FC1
02A0:  MOVLW  07
02A2:  MOVWF  FB4
02A4:  MOVLW  3F
02A6:  MOVWF  1C
02A8:  MOVLW  06
02AA:  MOVWF  1D
02AC:  MOVLW  5B
02AE:  MOVWF  1E
02B0:  MOVLW  4F
02B2:  MOVWF  1F
02B4:  MOVLW  66
02B6:  MOVWF  20
02B8:  MOVLW  6D
02BA:  MOVWF  21
02BC:  MOVLW  7D
02BE:  MOVWF  22
02C0:  MOVLW  07
02C2:  MOVWF  23
02C4:  MOVLW  7F
02C6:  MOVWF  24
02C8:  MOVLW  6F
02CA:  MOVWF  25
02CC:  MOVLW  6B
02CE:  MOVWF  26
02D0:  MOVLW  37
02D2:  MOVWF  27
02D4:  MOVLW  39
02D6:  MOVWF  28
02D8:  MOVLW  5E
02DA:  MOVWF  29
02DC:  MOVLW  79
02DE:  MOVWF  2A
02E0:  MOVLW  71
02E2:  MOVWF  2B
02E4:  MOVLW  01
02E6:  MOVWF  2C
02E8:  MOVLW  02
02EA:  MOVWF  2D
02EC:  MOVLW  04
02EE:  MOVWF  2E
....................    init();  
02F0:  BRA    0252
....................    while (TRUE) { 
02F2:  BRA    02F2
....................    } 
.................... } 
....................  
.................... // Orismos sinartiseon eksipiretisis 
.................... #INT_TIMER0    // Diakopi me megali protereotita 
.................... void timer0_int(void) { 
02F4:  SLEEP 
....................    int16 mon,dec,eka; 
....................    set_timer0(timer_start_value); // Arxiki timi tou metriti 
*
00DC:  MOVLW  15
00DE:  MOVWF  FD7
00E0:  MOVLW  A0
00E2:  MOVWF  FD6
.................... //   sec_set_counter--; 
.................... //   if ((sec_set_counter == 0)) { 
.................... //      sec_set_counter = 1; 
....................       if((bit_test(PORTD,2) == 1) && (bit_test(PORTD,0) == 1)) { 
00E4:  BTFSS  F83.2
00E6:  BRA    010A
00E8:  BTFSS  F83.0
00EA:  BRA    010A
....................          seconds++; // Afksanei kathe 1/10 sec 
00EC:  INCF   17,F
....................          if (seconds > 59) { 
00EE:  MOVF   17,W
00F0:  SUBLW  3B
00F2:  BC    010A
....................             seconds = 0; 
00F4:  CLRF   17
....................             minute++; 
00F6:  INCF   18,F
....................             if (minute > 59) { 
00F8:  MOVF   18,W
00FA:  SUBLW  3B
00FC:  BC    0102
....................                minute = 0; 
00FE:  CLRF   18
....................                hour++; 
0100:  INCF   19,F
....................             } 
....................             if (hour >23) { 
0102:  MOVF   19,W
0104:  SUBLW  17
0106:  BC    010A
....................                hour = 0; 
0108:  CLRF   19
....................             } 
....................          } 
....................       } 
....................       if((bit_test(PORTD,2) == 1) && (bit_test(PORTD,1) == 1)) { 
010A:  BTFSS  F83.2
010C:  BRA    0136
010E:  BTFSS  F83.1
0110:  BRA    0136
....................          seconds--; 
0112:  DECF   17,F
....................          if (seconds > 59) { 
0114:  MOVF   17,W
0116:  SUBLW  3B
0118:  BC    0120
....................             seconds = 59; 
011A:  MOVLW  3B
011C:  MOVWF  17
....................             minute--; 
011E:  DECF   18,F
....................          } 
....................          if (minute > 59) { // Meionei kathe 1 sec 
0120:  MOVF   18,W
0122:  SUBLW  3B
0124:  BC    012C
....................             minute = 59; 
0126:  MOVLW  3B
0128:  MOVWF  18
....................             hour--; 
012A:  DECF   19,F
....................          } 
....................          if(hour > 23) { 
012C:  MOVF   19,W
012E:  SUBLW  17
0130:  BC    0136
....................             hour = 23; 
0132:  MOVLW  17
0134:  MOVWF  19
....................          }                
....................       }    
.................... //   } 
....................    counter--; // Kathe 200 * 5 msec  = 1 sec 
0136:  DECF   1A,F
....................    if (counter%100 == 0) { 
0138:  MOVFF  1A,35
013C:  MOVLW  64
013E:  MOVWF  36
0140:  RCALL  0096
0142:  MOVF   00,F
0144:  BNZ   0156
....................       flag^=1; 
0146:  CLRF   00
0148:  BTFSC  1B.0
014A:  INCF   00,F
014C:  MOVLW  01
014E:  XORWF  00,F
0150:  BCF    1B.0
0152:  BTFSC  00.0
0154:  BSF    1B.0
....................    } 
....................    if (counter == 0) { 
0156:  MOVF   1A,F
0158:  BNZ   0180
....................       counter = 200; 
015A:  MOVLW  C8
015C:  MOVWF  1A
....................       if (bit_test(PORTD,2) == 0) { 
015E:  BTFSC  F83.2
0160:  BRA    0180
....................          seconds++; // Afksanei kathe 1 sec 
0162:  INCF   17,F
....................          if (seconds > 59) { 
0164:  MOVF   17,W
0166:  SUBLW  3B
0168:  BC    0180
....................             seconds = 0; 
016A:  CLRF   17
....................             minute++; 
016C:  INCF   18,F
....................             if (minute > 59) { 
016E:  MOVF   18,W
0170:  SUBLW  3B
0172:  BC    0178
....................                minute = 0; 
0174:  CLRF   18
....................                hour++; 
0176:  INCF   19,F
....................             } 
....................             if (hour >23) { 
0178:  MOVF   19,W
017A:  SUBLW  17
017C:  BC    0180
....................                hour = 0; 
017E:  CLRF   19
....................             }                
....................          }               
....................       }    
....................    }                        
....................    if (flag == 0) { 
0180:  BTFSC  1B.0
0182:  BRA    01B6
....................       dec = (int8)minute / 10; 
0184:  MOVFF  18,35
0188:  MOVLW  0A
018A:  MOVWF  36
018C:  RCALL  0096
018E:  CLRF   32
0190:  MOVFF  01,31
....................       mon =  minute - dec * 10; 
0194:  MOVFF  32,36
0198:  MOVFF  31,35
019C:  CLRF   38
019E:  MOVLW  0A
01A0:  MOVWF  37
01A2:  RCALL  00BE
01A4:  MOVF   01,W
01A6:  SUBWF  18,W
01A8:  MOVWF  2F
01AA:  MOVLW  00
01AC:  SUBFWB 02,W
01AE:  MOVWF  30
....................       eka = 11; 
01B0:  CLRF   34
01B2:  MOVLW  0B
01B4:  MOVWF  33
....................    } 
....................    if (flag == 1) { 
01B6:  BTFSS  1B.0
01B8:  BRA    01EC
....................       dec = (int8)hour / 10; 
01BA:  MOVFF  19,35
01BE:  MOVLW  0A
01C0:  MOVWF  36
01C2:  RCALL  0096
01C4:  CLRF   32
01C6:  MOVFF  01,31
....................       mon =  hour - dec * 10; 
01CA:  MOVFF  32,36
01CE:  MOVFF  31,35
01D2:  CLRF   38
01D4:  MOVLW  0A
01D6:  MOVWF  37
01D8:  RCALL  00BE
01DA:  MOVF   01,W
01DC:  SUBWF  19,W
01DE:  MOVWF  2F
01E0:  MOVLW  00
01E2:  SUBFWB 02,W
01E4:  MOVWF  30
....................       eka = 10; 
01E6:  CLRF   34
01E8:  MOVLW  0A
01EA:  MOVWF  33
....................    } 
....................    des = ++des%3; 
01EC:  INCF   16,F
01EE:  MOVFF  16,35
01F2:  MOVLW  03
01F4:  MOVWF  36
01F6:  RCALL  0096
01F8:  MOVFF  00,16
....................    PORTC = dig[des]; 
01FC:  CLRF   03
01FE:  MOVF   16,W
0200:  ADDLW  2C
0202:  MOVWF  FE9
0204:  MOVLW  00
0206:  ADDWFC 03,W
0208:  MOVWF  FEA
020A:  MOVFF  FEF,F82
....................    if (des==0) { 
020E:  MOVF   16,F
0210:  BNZ   0222
....................       PORTB = table[mon]; 
0212:  MOVLW  1C
0214:  ADDWF  2F,W
0216:  MOVWF  FE9
0218:  MOVLW  00
021A:  ADDWFC 30,W
021C:  MOVWF  FEA
021E:  MOVFF  FEF,F81
....................    }          
....................    if (des==1) { 
0222:  DECFSZ 16,W
0224:  BRA    0236
....................       PORTB = table[dec]; 
0226:  MOVLW  1C
0228:  ADDWF  31,W
022A:  MOVWF  FE9
022C:  MOVLW  00
022E:  ADDWFC 32,W
0230:  MOVWF  FEA
0232:  MOVFF  FEF,F81
....................    }             
....................    if (des==2) { 
0236:  MOVF   16,W
0238:  SUBLW  02
023A:  BNZ   024C
....................       PORTB = table[eka]; 
023C:  MOVLW  1C
023E:  ADDWF  33,W
0240:  MOVWF  FE9
0242:  MOVLW  00
0244:  ADDWFC 34,W
0246:  MOVWF  FEA
0248:  MOVFF  FEF,F81
....................    }                
024C:  BCF    FF2.2
024E:  GOTO   0054
.................... }                      
.................... void init (void) { 
....................    set_tris_b(0x00); // Orismos tou PORTB san eksodo (0) 
0252:  MOVLW  00
0254:  MOVWF  F93
....................    set_tris_c(0x00); // Orismos tou PORTBC PIN2 san eksodo (1) gia ti Vasi tou Endeikti 
0256:  MOVWF  F94
....................    set_tris_d(0xff); // Orismos tou PORTD san eisodo (1) 
0258:  MOVLW  FF
025A:  MOVWF  F95
....................    PORTB = 0; 
025C:  CLRF   F81
....................    PORTC = 0; 
025E:  CLRF   F82
....................    counter = 200; // Arxikopoiisi tou counter 
0260:  MOVLW  C8
0262:  MOVWF  1A
....................    seconds = 0; // Midenismos ton defterolepton 
0264:  CLRF   17
.................... //   sec_set_counter = 1; 
....................    minute =0; 
0266:  CLRF   18
....................    hour = 12; 
0268:  MOVLW  0C
026A:  MOVWF  19
....................    des =0; 
026C:  CLRF   16
....................    flag = 0; 
026E:  BCF    1B.0
....................    SETUP_TIMER_0(T0_INTERNAL | T0_DIV_1 ); 
0270:  MOVLW  88
0272:  MOVWF  FD5
....................    set_timer0(timer_start_value); // Arxiki timi tou metriti  
0274:  MOVLW  15
0276:  MOVWF  FD7
0278:  MOVLW  A0
027A:  MOVWF  FD6
....................    enable_interrupts(INT_TIMER0); // Energopoiisi tis diakopis timer0 
027C:  BSF    FF2.5
....................    enable_interrupts(GLOBAL); // Energopoiisi genikou diakopti diakopon 
027E:  MOVLW  C0
0280:  IORWF  FF2,F
0282:  GOTO   02F2 (RETURN)
.................... } 
....................  

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
