CCS PCH C Compiler, Version 5.011, 5967               27-Απρ-25 10:53

               Filename:   F:\Common\Programming\GitHub\DIPAE_EnsomatomenaSystimata_6th_Term\Askisi5\Askisi5.2\ask5_2.lst

               ROM used:   774 bytes (2%)
                           Largest free fragment is 31990
               RAM used:   48 (2%) at main() level
                           59 (3%) worst case
               Stack used: 3 locations (1 in main + 2 for interrupts)
               Stack size: 31

*
0000:  GOTO   0296
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.5
004A:  GOTO   0054
004E:  BTFSC  FF2.2
0050:  GOTO   00DC
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include <main_.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
0096:  MOVF   37,W
0098:  CLRF   01
009A:  SUBWF  36,W
009C:  BC    00A4
009E:  MOVFF  36,00
00A2:  BRA    00BC
00A4:  CLRF   00
00A6:  MOVLW  08
00A8:  MOVWF  38
00AA:  RLCF   36,F
00AC:  RLCF   00,F
00AE:  MOVF   37,W
00B0:  SUBWF  00,W
00B2:  BTFSC  FD8.0
00B4:  MOVWF  00
00B6:  RLCF   01,F
00B8:  DECFSZ 38,F
00BA:  BRA    00AA
00BC:  RETURN 0
00BE:  MOVF   36,W
00C0:  MULWF  38
00C2:  MOVFF  FF3,01
00C6:  MOVFF  FF4,00
00CA:  MULWF  39
00CC:  MOVF   FF3,W
00CE:  ADDWF  00,F
00D0:  MOVF   37,W
00D2:  MULWF  38
00D4:  MOVF   FF3,W
00D6:  ADDWFC 00,W
00D8:  MOVWF  02
00DA:  RETURN 0
....................  
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... //#FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#build (reset=0x800, interrupt=0x808) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#org 0, 0x7FF {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
....................  
.................... #use standard_io ( A )   // Standard είσοδοι και έξοδοι   // Standard είσοδοι και έξοδοι  
.................... #use standard_io ( B) 
.................... #use standard_io ( C ) 
.................... #byte PORTA         =0xF80  //ορισμός των θυρών με την θέση τους στην 	 
.................... #byte PORTB         =0xF81 
.................... #byte PORTC         =0xF82 
.................... #byte PORTD         =0xF83 
.................... #byte PORTE         =0xF84 
.................... int8  des=0; 
.................... int8 seconds=0; 
.................... int8 sec_set_counter = 20; 
.................... int8 minute=0; 
.................... int8 hour=12; 
.................... int8 counter; 
.................... int1 flag=0; 
.................... int8 table[16] =          {  0b00111111, //0 
....................                      	     0b00000110, //1 
....................                              0b01011011, //2 
....................                              0b01001111, //3 
....................                              0b01100110, //4 
....................                              0b01101101, //5 
....................                              0b01111101, //6 
....................                              0b00000111, //7 
....................                              0b01111111, //8 
....................                              0b01101111, //9 
....................                              0b01101011, //Ω 
....................                              0b00110111, //Π 
....................                              0b00111001,  
....................                              0b01011110,  
....................                              0b01111001,  
....................                              0b01110001};   
....................  
.................... int8 dig[3] = {1,2,4}; 
.................... // Δήλωση συναρτήσεων 
....................  
.................... void timer0_int(void); 
.................... void init (void); 
....................  
.................... void main() 
*
0296:  CLRF   FF8
0298:  BCF    FD0.7
029A:  BSF    07.7
029C:  CLRF   16
029E:  CLRF   17
02A0:  MOVLW  14
02A2:  MOVWF  18
02A4:  CLRF   19
02A6:  MOVLW  0C
02A8:  MOVWF  1A
02AA:  BCF    1C.0
02AC:  MOVF   FC1,W
02AE:  ANDLW  C0
02B0:  IORLW  0F
02B2:  MOVWF  FC1
02B4:  MOVLW  07
02B6:  MOVWF  FB4
02B8:  MOVLW  3F
02BA:  MOVWF  1D
02BC:  MOVLW  06
02BE:  MOVWF  1E
02C0:  MOVLW  5B
02C2:  MOVWF  1F
02C4:  MOVLW  4F
02C6:  MOVWF  20
02C8:  MOVLW  66
02CA:  MOVWF  21
02CC:  MOVLW  6D
02CE:  MOVWF  22
02D0:  MOVLW  7D
02D2:  MOVWF  23
02D4:  MOVLW  07
02D6:  MOVWF  24
02D8:  MOVLW  7F
02DA:  MOVWF  25
02DC:  MOVLW  6F
02DE:  MOVWF  26
02E0:  MOVLW  6B
02E2:  MOVWF  27
02E4:  MOVLW  37
02E6:  MOVWF  28
02E8:  MOVLW  39
02EA:  MOVWF  29
02EC:  MOVLW  5E
02EE:  MOVWF  2A
02F0:  MOVLW  79
02F2:  MOVWF  2B
02F4:  MOVLW  71
02F6:  MOVWF  2C
02F8:  MOVLW  01
02FA:  MOVWF  2D
02FC:  MOVLW  02
02FE:  MOVWF  2E
0300:  MOVLW  04
0302:  MOVWF  2F
.................... { 
....................       init();  
0304:  BRA    025E
....................     
....................      while (1){    	     //  Περιμένει το Interrupt  
0306:  BRA    0306
....................       	       } 
.................... } 
....................  
.................... // Ορισμός συναρτήσεων  
....................  
.................... #INT_TIMER0    // Διακοπή με μεγάλη προτεραιότητα 
.................... void timer0_int(void){ 
0308:  SLEEP 
.................... 	int16 mon,dec,eka; 
.................... 	set_timer0(5536); // αρχική τιμή του μετρητή 
*
00DC:  MOVLW  15
00DE:  MOVWF  FD7
00E0:  MOVLW  A0
00E2:  MOVWF  FD6
.................... 	sec_set_counter--; 
00E4:  DECF   18,F
.................... 	if ((sec_set_counter == 0)){ 
00E6:  MOVF   18,F
00E8:  BNZ   0140
.................... 		 sec_set_counter = 1; 
00EA:  MOVLW  01
00EC:  MOVWF  18
.................... 		  if((bit_test(PORTD,2) == 1) && (bit_test(PORTD,0) == 1)){ 
00EE:  BTFSS  F83.2
00F0:  BRA    0114
00F2:  BTFSS  F83.0
00F4:  BRA    0114
.................... 		     seconds++; // Αυξάνει κάθε 1/10 sec 
00F6:  INCF   17,F
.................... 		     if (seconds > 59){ 
00F8:  MOVF   17,W
00FA:  SUBLW  3B
00FC:  BC    0114
.................... 			    seconds = 0; 
00FE:  CLRF   17
.................... 			    minute++; 
0100:  INCF   19,F
.................... 			    if (minute > 59){ 
0102:  MOVF   19,W
0104:  SUBLW  3B
0106:  BC    010C
.................... 			        minute = 0; 
0108:  CLRF   19
.................... 		            hour++; 
010A:  INCF   1A,F
.................... 						        } 
.................... 				    if (hour >23){ 
010C:  MOVF   1A,W
010E:  SUBLW  17
0110:  BC    0114
.................... 					    hour = 0; 
0112:  CLRF   1A
.................... 				   		         } 
.................... 			         	     } 
.................... 			 												} 
.................... 			 
.................... 		 if((bit_test(PORTD,2) == 1) && (bit_test(PORTD,1) == 1)){ 
0114:  BTFSS  F83.2
0116:  BRA    0140
0118:  BTFSS  F83.1
011A:  BRA    0140
.................... 		     	seconds--; 
011C:  DECF   17,F
.................... 		     if (seconds > 59){ 
011E:  MOVF   17,W
0120:  SUBLW  3B
0122:  BC    012A
.................... 		     	seconds = 59; 
0124:  MOVLW  3B
0126:  MOVWF  17
.................... 		     	 minute--; 
0128:  DECF   19,F
.................... 							  } 
.................... 		     	 if (minute > 59){ // Μειώνει κάθε 1 sec 
012A:  MOVF   19,W
012C:  SUBLW  3B
012E:  BC    0136
.................... 		             minute = 59; 
0130:  MOVLW  3B
0132:  MOVWF  19
.................... 		             hour--; 
0134:  DECF   1A,F
.................... 		       					} 
.................... 		       		if(hour > 23){ 
0136:  MOVF   1A,W
0138:  SUBLW  17
013A:  BC    0140
.................... 		       		      hour = 23; 
013C:  MOVLW  17
013E:  MOVWF  1A
.................... 		       					}      			 
.................... 			        	                                        }    
....................                         	    } 
....................     counter--; // Κάθε 200 * 5 msec  = 1 sec 
0140:  DECF   1B,F
....................     if (counter%100 == 0){flag^=1;}		        	                                         																               	      
0142:  MOVFF  1B,36
0146:  MOVLW  64
0148:  MOVWF  37
014A:  RCALL  0096
014C:  MOVF   00,F
014E:  BNZ   0160
0150:  CLRF   00
0152:  BTFSC  1C.0
0154:  INCF   00,F
0156:  MOVLW  01
0158:  XORWF  00,F
015A:  BCF    1C.0
015C:  BTFSC  00.0
015E:  BSF    1C.0
.................... 	if (counter == 0){ 
0160:  MOVF   1B,F
0162:  BTFSS  FD8.2
0164:  BRA    018C
.................... 					counter = 200; 
0166:  MOVLW  C8
0168:  MOVWF  1B
.................... 					 
.................... 		if (bit_test(PORTD,2) == 0){ 
016A:  BTFSC  F83.2
016C:  BRA    018C
.................... 			 	seconds++; // Αυξάνει κάθε 1 sec 
016E:  INCF   17,F
.................... 					if (seconds > 59){ 
0170:  MOVF   17,W
0172:  SUBLW  3B
0174:  BC    018C
.................... 									   seconds = 0; 
0176:  CLRF   17
.................... 									   minute++; 
0178:  INCF   19,F
.................... 									   if (minute > 59){ 
017A:  MOVF   19,W
017C:  SUBLW  3B
017E:  BC    0184
.................... 													   minute = 0; 
0180:  CLRF   19
.................... 													   hour++; 
0182:  INCF   1A,F
.................... 														} 
.................... 													if (hour >23){ 
0184:  MOVF   1A,W
0186:  SUBLW  17
0188:  BC    018C
.................... 														hour = 0; 
018A:  CLRF   1A
.................... 													    }				    
.................... 									  }				   
.................... 				            	  }	 
.................... 							}			           	 
.................... 			 
....................     		if (flag == 0){ 
018C:  BTFSC  1C.0
018E:  BRA    01C2
.................... 						  dec = (int8)minute / 10; 
0190:  MOVFF  19,36
0194:  MOVLW  0A
0196:  MOVWF  37
0198:  RCALL  0096
019A:  CLRF   33
019C:  MOVFF  01,32
.................... 						  mon =  minute - dec * 10; 
01A0:  MOVFF  33,37
01A4:  MOVFF  32,36
01A8:  CLRF   39
01AA:  MOVLW  0A
01AC:  MOVWF  38
01AE:  RCALL  00BE
01B0:  MOVF   01,W
01B2:  SUBWF  19,W
01B4:  MOVWF  30
01B6:  MOVLW  00
01B8:  SUBFWB 02,W
01BA:  MOVWF  31
.................... 						  eka = 11; 
01BC:  CLRF   35
01BE:  MOVLW  0B
01C0:  MOVWF  34
.................... 						} 
.................... 			if (flag == 1){ 
01C2:  BTFSS  1C.0
01C4:  BRA    01F8
.................... 						  dec = (int8)hour / 10; 
01C6:  MOVFF  1A,36
01CA:  MOVLW  0A
01CC:  MOVWF  37
01CE:  RCALL  0096
01D0:  CLRF   33
01D2:  MOVFF  01,32
.................... 						  mon =  hour - dec * 10; 
01D6:  MOVFF  33,37
01DA:  MOVFF  32,36
01DE:  CLRF   39
01E0:  MOVLW  0A
01E2:  MOVWF  38
01E4:  RCALL  00BE
01E6:  MOVF   01,W
01E8:  SUBWF  1A,W
01EA:  MOVWF  30
01EC:  MOVLW  00
01EE:  SUBFWB 02,W
01F0:  MOVWF  31
.................... 						  eka = 10; 
01F2:  CLRF   35
01F4:  MOVLW  0A
01F6:  MOVWF  34
.................... 						} 
.................... 			 
.................... 			des = ++des%3; 
01F8:  INCF   16,F
01FA:  MOVFF  16,36
01FE:  MOVLW  03
0200:  MOVWF  37
0202:  RCALL  0096
0204:  MOVFF  00,16
.................... 			 
.................... 			PORTC = dig[des]; 
0208:  CLRF   03
020A:  MOVF   16,W
020C:  ADDLW  2D
020E:  MOVWF  FE9
0210:  MOVLW  00
0212:  ADDWFC 03,W
0214:  MOVWF  FEA
0216:  MOVFF  FEF,F82
.................... 			if (des==0){ 
021A:  MOVF   16,F
021C:  BNZ   022E
.................... 						PORTB = table[mon]; 
021E:  MOVLW  1D
0220:  ADDWF  30,W
0222:  MOVWF  FE9
0224:  MOVLW  00
0226:  ADDWFC 31,W
0228:  MOVWF  FEA
022A:  MOVFF  FEF,F81
.................... 		          								 
.................... 						}			 
.................... 								 
.................... 			if (des==1){ 
022E:  DECFSZ 16,W
0230:  BRA    0242
.................... 						PORTB = table[dec]; 
0232:  MOVLW  1D
0234:  ADDWF  32,W
0236:  MOVWF  FE9
0238:  MOVLW  00
023A:  ADDWFC 33,W
023C:  MOVWF  FEA
023E:  MOVFF  FEF,F81
.................... 		          								 
.................... 						}				 
.................... 			if (des==2){ 
0242:  MOVF   16,W
0244:  SUBLW  02
0246:  BNZ   0258
.................... 						PORTB = table[eka]; 
0248:  MOVLW  1D
024A:  ADDWF  34,W
024C:  MOVWF  FE9
024E:  MOVLW  00
0250:  ADDWFC 35,W
0252:  MOVWF  FEA
0254:  MOVFF  FEF,F81
.................... 		          		 
.................... 						}					 
0258:  BCF    FF2.2
025A:  GOTO   0054
.................... }							 
.................... void init (void){ 
.................... 		     set_tris_b(0x00);     // Καθορισμός της πόρτας Β ως έξοδος 
025E:  MOVLW  00
0260:  MOVWF  F93
.................... 		     set_tris_c(0x00);     // Καθορισμός της πόρτας C ως έξοδος 
0262:  MOVWF  F94
.................... 		     set_tris_d(0xff); 
0264:  MOVLW  FF
0266:  MOVWF  F95
.................... 		     PORTB = 0; 
0268:  CLRF   F81
.................... 		     PORTC = 0; 
026A:  CLRF   F82
.................... 		     counter = 200;	    // Αρχική τιμή του counter 
026C:  MOVLW  C8
026E:  MOVWF  1B
.................... 			 seconds = 0; 
0270:  CLRF   17
.................... 			 sec_set_counter = 1; 
0272:  MOVLW  01
0274:  MOVWF  18
.................... 			 minute =0; 
0276:  CLRF   19
.................... 			 hour = 12; 
0278:  MOVLW  0C
027A:  MOVWF  1A
.................... 			 des =0; 
027C:  CLRF   16
.................... 			 flag = 0; 
027E:  BCF    1C.0
.................... 		     SETUP_TIMER_0(T0_INTERNAL | T0_DIV_1 ); 
0280:  MOVLW  88
0282:  MOVWF  FD5
.................... 		     set_timer0(5536);   //  Αρχική τιμή του  hardware μετρητή  
0284:  MOVLW  15
0286:  MOVWF  FD7
0288:  MOVLW  A0
028A:  MOVWF  FD6
....................       		 enable_interrupts(INT_TIMER0); // Ενεργοποίηση της 								    // διακοπής του timer0 
028C:  BSF    FF2.5
....................       		 enable_interrupts(GLOBAL);       // Ενεργοποίηση του γενικού 							   // διακόπτη των διακοπών 
028E:  MOVLW  C0
0290:  IORWF  FF2,F
0292:  GOTO   0306 (RETURN)
.................... 				 
.................... 		} 
....................  

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
