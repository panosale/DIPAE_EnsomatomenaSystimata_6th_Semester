CCS PCH C Compiler, Version 5.011, 5967               05-Απρ-25 21:48

               Filename:   D:\Common\Programming\GitHub\DIPAE_EnsomatomenaSystimata_6th_Term\Askisi5\TestIndicator2\testIndicator2.lst

               ROM used:   722 bytes (2%)
                           Largest free fragment is 32042
               RAM used:   45 (2%) at main() level
                           58 (3%) worst case
               Stack used: 3 locations (1 in main + 2 for interrupts)
               Stack size: 31

*
0000:  GOTO   026C
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.5
004A:  GOTO   0054
004E:  BTFSC  FF2.2
0050:  GOTO   0120
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // DIPAE - Enosmatomena Systimata - 6o Eksamino 
.................... // Alevropoulos Panagiotis 
.................... // AM: 2022005 
.................... // Askisi: Test endeikti 8 tomeon 
.................... #include <main_.h> // Gia ektelesi se Proteus 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
0096:  CLRF   01
0098:  CLRF   02
009A:  CLRF   00
009C:  CLRF   03
009E:  MOVF   38,W
00A0:  BNZ   00A6
00A2:  MOVF   37,W
00A4:  BZ    00D6
00A6:  MOVLW  10
00A8:  MOVWF  39
00AA:  BCF    FD8.0
00AC:  RLCF   35,F
00AE:  RLCF   36,F
00B0:  RLCF   00,F
00B2:  RLCF   03,F
00B4:  MOVF   38,W
00B6:  SUBWF  03,W
00B8:  BNZ   00BE
00BA:  MOVF   37,W
00BC:  SUBWF  00,W
00BE:  BNC   00CE
00C0:  MOVF   37,W
00C2:  SUBWF  00,F
00C4:  BTFSS  FD8.0
00C6:  DECF   03,F
00C8:  MOVF   38,W
00CA:  SUBWF  03,F
00CC:  BSF    FD8.0
00CE:  RLCF   01,F
00D0:  RLCF   02,F
00D2:  DECFSZ 39,F
00D4:  BRA    00AA
00D6:  RETURN 0
00D8:  MOVF   35,W
00DA:  MULWF  37
00DC:  MOVFF  FF3,01
00E0:  MOVFF  FF4,00
00E4:  MULWF  38
00E6:  MOVF   FF3,W
00E8:  ADDWF  00,F
00EA:  MOVF   36,W
00EC:  MULWF  37
00EE:  MOVF   FF3,W
00F0:  ADDWFC 00,W
00F2:  MOVWF  02
00F4:  RETURN 0
00F6:  MOVF   34,W
00F8:  CLRF   01
00FA:  SUBWF  33,W
00FC:  BC    0104
00FE:  MOVFF  33,00
0102:  BRA    011C
0104:  CLRF   00
0106:  MOVLW  08
0108:  MOVWF  35
010A:  RLCF   33,F
010C:  RLCF   00,F
010E:  MOVF   34,W
0110:  SUBWF  00,W
0112:  BTFSC  FD8.0
0114:  MOVWF  00
0116:  RLCF   01,F
0118:  DECFSZ 35,F
011A:  BRA    010A
011C:  GOTO   01E8 (RETURN)
....................  
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... //#FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#build (reset=0x800, interrupt=0x808) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#org 0, 0x7FF {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
.................... //#include <main.h> // Gia ektelesi se PIC 
....................  
.................... #use standard_io (A) // Standard Eisodoi & Eksodoi 
.................... #use standard_io (B) // Standard Eisodoi & Eksodoi 
.................... #use standard_io (C) // Standard Eisodoi & Eksodoi 
.................... #byte PORTA =0xF80 // Orismos ton thiron me ti thesi tous sti mnimi 
.................... #byte PORTB =0xF81 // Orismos ton thiron me ti thesi tous sti mnimi 
.................... #byte PORTC =0xF82 // Orismos ton thiron me ti thesi tous sti mnimi 
.................... #byte PORTD =0xF83 // Orismos ton thiron me ti thesi tous sti mnimi 
.................... #byte PORTE =0xF84 // Orismos ton thiron me ti thesi tous sti mnimi 
....................  
.................... const int16 timer_start_value = 5536; // Orismos arxikis timis timer0; 
....................  
.................... int8 des = 0; 
.................... int16 seconds = 0; 
.................... int8 counter; 
....................  
.................... // Dilosi pinaka katastaseon Endeikti 7 tomeon koinis kathodou 
.................... int8 table[16] = {0x3f, // 0b00111111 -> 0 
....................                   0x06, // 0b00000110 -> 1 
....................                   0x5b, // 0b01011011 -> 2 
....................                   0x4f, // 0b01001111 -> 3 
....................                   0x66, // 0b01100110 -> 4 
....................                   0x6d, // 0b01101101 -> 5 
....................                   0x7d, // 0b01111101 -> 6 
....................                   0x07, // 0b00000111 -> 7 
....................                   0x7f, // 0b01111111 -> 8 
....................                   0x6f, // 0b01101111 -> 9 
....................                   0x77, // 0b01110111 -> A 
....................                   0x7c, // 0b01111100 -> b 
....................                   0x39, // 0b00111001 -> C 
....................                   0x5e, // 0b01011110 -> d 
....................                   0x79, // 0b01111001 -> E 
....................                   0x71}; // 0b01110001 -> F 
.................... int8 dig[3] = {1, 2, 4}; 
....................  
.................... // Dilosi sinartiseon eksipiretisis 
.................... void timer0_int(void); 
.................... void init(void); 
....................  
.................... void main() 
*
026C:  CLRF   FF8
026E:  BCF    FD0.7
0270:  BSF    07.7
0272:  CLRF   16
0274:  CLRF   18
0276:  CLRF   17
0278:  MOVF   FC1,W
027A:  ANDLW  C0
027C:  IORLW  0F
027E:  MOVWF  FC1
0280:  MOVLW  07
0282:  MOVWF  FB4
0284:  MOVLW  3F
0286:  MOVWF  1A
0288:  MOVLW  06
028A:  MOVWF  1B
028C:  MOVLW  5B
028E:  MOVWF  1C
0290:  MOVLW  4F
0292:  MOVWF  1D
0294:  MOVLW  66
0296:  MOVWF  1E
0298:  MOVLW  6D
029A:  MOVWF  1F
029C:  MOVLW  7D
029E:  MOVWF  20
02A0:  MOVLW  07
02A2:  MOVWF  21
02A4:  MOVLW  7F
02A6:  MOVWF  22
02A8:  MOVLW  6F
02AA:  MOVWF  23
02AC:  MOVLW  77
02AE:  MOVWF  24
02B0:  MOVLW  7C
02B2:  MOVWF  25
02B4:  MOVLW  39
02B6:  MOVWF  26
02B8:  MOVLW  5E
02BA:  MOVWF  27
02BC:  MOVLW  79
02BE:  MOVWF  28
02C0:  MOVLW  71
02C2:  MOVWF  29
02C4:  MOVLW  01
02C6:  MOVWF  2A
02C8:  MOVLW  02
02CA:  MOVWF  2B
02CC:  MOVLW  04
02CE:  MOVWF  2C
.................... { 
....................    init(); 
02D0:  BRA    0242
....................    while (TRUE) { 
02D2:  BRA    02D2
....................    } 
.................... }    
....................  
.................... #INT_TIMER0 
.................... void timer0_int(void) { 
02D4:  SLEEP 
....................    int16 mon, dek, eka; 
....................    counter--; // Kathe 200 * 5msec = 1sec 
*
0120:  DECF   19,F
....................    if (counter == 0) { 
0122:  MOVF   19,F
0124:  BTFSS  FD8.2
0126:  BRA    023C
....................       seconds++; // Afksani timi 1 kathe 1 sec 
0128:  INCF   17,F
012A:  BTFSC  FD8.2
012C:  INCF   18,F
....................       counter = 200; //rxiki timi tou counter 
012E:  MOVLW  C8
0130:  MOVWF  19
....................       if (seconds > 999) { 
0132:  MOVF   18,W
0134:  SUBLW  02
0136:  BC    0146
0138:  XORLW  FF
013A:  BNZ   0142
013C:  MOVF   17,W
013E:  SUBLW  E7
0140:  BC    0146
....................          seconds = 0; 
0142:  CLRF   18
0144:  CLRF   17
....................       } 
....................       eka = (int8) (seconds / 100); // Ypologismos ekatontadon tou metriti... 
0146:  MOVFF  18,36
014A:  MOVFF  17,35
014E:  CLRF   38
0150:  MOVLW  64
0152:  MOVWF  37
0154:  RCALL  0096
0156:  MOVFF  02,32
015A:  MOVFF  01,31
....................       dek = (int8) ((seconds - (100 * eka)) / 10); // ... ton dekadon... 
015E:  CLRF   36
0160:  MOVLW  64
0162:  MOVWF  35
0164:  MOVFF  32,38
0168:  MOVFF  31,37
016C:  RCALL  00D8
016E:  MOVFF  02,03
0172:  MOVF   01,W
0174:  SUBWF  17,W
0176:  MOVWF  33
0178:  MOVF   02,W
017A:  SUBWFB 18,W
017C:  MOVWF  34
017E:  MOVWF  36
0180:  MOVFF  33,35
0184:  CLRF   38
0186:  MOVLW  0A
0188:  MOVWF  37
018A:  RCALL  0096
018C:  MOVFF  02,30
0190:  MOVFF  01,2F
....................       mon = (int8) (seconds - (100 * eka) - (10 * dek)); // ... ton monadon. 
0194:  CLRF   36
0196:  MOVLW  64
0198:  MOVWF  35
019A:  MOVFF  32,38
019E:  MOVFF  31,37
01A2:  RCALL  00D8
01A4:  MOVFF  02,03
01A8:  MOVF   01,W
01AA:  SUBWF  17,W
01AC:  MOVWF  33
01AE:  MOVF   02,W
01B0:  SUBWFB 18,W
01B2:  MOVWF  34
01B4:  CLRF   36
01B6:  MOVLW  0A
01B8:  MOVWF  35
01BA:  MOVFF  30,38
01BE:  MOVFF  2F,37
01C2:  RCALL  00D8
01C4:  MOVF   01,W
01C6:  SUBWF  33,W
01C8:  MOVWF  00
01CA:  MOVF   02,W
01CC:  SUBWFB 34,W
01CE:  MOVF   00,W
01D0:  CLRF   2E
01D2:  MOVWF  2D
....................       set_timer0(timer_start_value); // Arxikopoiisi tou timer0; 
01D4:  MOVLW  15
01D6:  MOVWF  FD7
01D8:  MOVLW  A0
01DA:  MOVWF  FD6
....................       des = ++des % 3; 
01DC:  INCF   16,F
01DE:  MOVFF  16,33
01E2:  MOVLW  03
01E4:  MOVWF  34
01E6:  BRA    00F6
01E8:  MOVFF  00,16
....................       PORTC = dig[des]; 
01EC:  CLRF   03
01EE:  MOVF   16,W
01F0:  ADDLW  2A
01F2:  MOVWF  FE9
01F4:  MOVLW  00
01F6:  ADDWFC 03,W
01F8:  MOVWF  FEA
01FA:  MOVFF  FEF,F82
....................       if (des == 0) 
01FE:  MOVF   16,F
0200:  BNZ   0212
....................          PORTB = table[mon]; // Deikse tis monades 
0202:  MOVLW  1A
0204:  ADDWF  2D,W
0206:  MOVWF  FE9
0208:  MOVLW  00
020A:  ADDWFC 2E,W
020C:  MOVWF  FEA
020E:  MOVFF  FEF,F81
....................       if (des == 1) 
0212:  DECFSZ 16,W
0214:  BRA    0226
....................          PORTB = table[dek]; // Deikse tis dekades 
0216:  MOVLW  1A
0218:  ADDWF  2F,W
021A:  MOVWF  FE9
021C:  MOVLW  00
021E:  ADDWFC 30,W
0220:  MOVWF  FEA
0222:  MOVFF  FEF,F81
....................       if (des == 2) 
0226:  MOVF   16,W
0228:  SUBLW  02
022A:  BNZ   023C
....................          PORTB = table[eka]; // Deikse tis ekatonades 
022C:  MOVLW  1A
022E:  ADDWF  31,W
0230:  MOVWF  FE9
0232:  MOVLW  00
0234:  ADDWFC 32,W
0236:  MOVWF  FEA
0238:  MOVFF  FEF,F81
....................    } 
023C:  BCF    FF2.2
023E:  GOTO   0054
.................... } 
....................  
.................... void init(void) { 
....................    set_tris_b(0x00); // Orismos tou PORTB san eksodo (0) 
0242:  MOVLW  00
0244:  MOVWF  F93
....................    set_tris_c(0x00); // Orismos tou PORTBC PIN2 san eksodo (1) gia ti geiosi tou Endeikti 
0246:  MOVWF  F94
....................    PORTB = 0; 
0248:  CLRF   F81
....................    PORTC = 0; 
024A:  CLRF   F82
....................    counter = 200; // Arxikopoiisi tou counter 
024C:  MOVLW  C8
024E:  MOVWF  19
....................    seconds = 0; // Arxikopoiisi tou metriti xronou 
0250:  CLRF   18
0252:  CLRF   17
....................    des = 0; // Arxikopoiisi tis epilogis psifiou 
0254:  CLRF   16
....................    SETUP_TIMER_0(T0_INTERNAL | T0_DIV_1); 
0256:  MOVLW  88
0258:  MOVWF  FD5
....................    set_timer0(timer_start_value); 
025A:  MOVLW  15
025C:  MOVWF  FD7
025E:  MOVLW  A0
0260:  MOVWF  FD6
....................    enable_interrupts(INT_TIMER0); 
0262:  BSF    FF2.5
....................    enable_interrupts(GLOBAL); // Energopoiisi genikou diakopti diakopon 
0264:  MOVLW  C0
0266:  IORWF  FF2,F
0268:  GOTO   02D2 (RETURN)
.................... } 
....................  

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
