CCS PCH C Compiler, Version 5.011, 5967               12-Μαϊ-25 00:03

               Filename:   F:\Common\Programming\GitHub\DIPAE_EnsomatomenaSystimata_6th_Term\Dokimes\TestBUTTON\TestBUTTON.lst

               ROM used:   132 bytes (0%)
                           Largest free fragment is 32636
               RAM used:   6 (0%) at main() level
                           8 (0%) worst case
               Stack used: 1 locations
               Stack size: 31

*
0000:  GOTO   0032
.................... #include <main_.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... //#FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
0004:  CLRF   FEA
0006:  MOVLW  07
0008:  MOVWF  FE9
000A:  MOVF   FEF,W
000C:  BZ    002E
000E:  MOVLW  0F
0010:  MOVWF  01
0012:  MOVLW  BF
0014:  MOVWF  00
0016:  CLRWDT
0018:  DECFSZ 00,F
001A:  BRA    0016
001C:  DECFSZ 01,F
001E:  BRA    0012
0020:  MOVLW  8F
0022:  MOVWF  00
0024:  DECFSZ 00,F
0026:  BRA    0024
0028:  CLRWDT
002A:  DECFSZ FEF,F
002C:  BRA    000E
002E:  GOTO   007C (RETURN)
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#build (reset=0x800, interrupt=0x808) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#org 0, 0x7FF {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
.................... // Gia oso einai patimeno to BUTTON afksanei to PORTB kata 1 mexri na ftasei sto 0xff (255) 
.................... // Molis afisoume to BUTTON meionei to PORTB kata 1 mexri na ftasei sto 0x0 (0) 
.................... #use standard_io ( A ) 
.................... //#use standard_io ( B ) 
.................... #use standard_io ( C ) 
.................... #byte PORTA =0xF80 
.................... #byte PORTB =0xF81 
.................... #byte PORTC =0xF82 
.................... #byte PORTD =0xF83 
.................... #byte PORTE =0xF84 
....................  
.................... int8 i; 
....................  
.................... void testASM(int n) { 
....................    n = n /2; 
....................    #asm 
....................    #endasm 
.................... } 
.................... void push_button(void); 
....................  
.................... void main() 
0032:  CLRF   FF8
0034:  BCF    FD0.7
0036:  MOVF   FC1,W
0038:  ANDLW  C0
003A:  IORLW  0F
003C:  MOVWF  FC1
003E:  MOVLW  07
0040:  MOVWF  FB4
.................... { 
....................    set_tris_b(0x00); // Ορίζουμε τη θύρα B σαν ΕΞΟΔΟ (0) 
0042:  MOVLW  00
0044:  MOVWF  F93
....................    set_tris_d(0xff); // Ορίζουμε τη θύρα D σαν ΕΙΣΟΔΟ(1) 
0046:  MOVLW  FF
0048:  MOVWF  F95
....................    PORTB = 0;    
004A:  CLRF   F81
....................    int8 i = 0; 
004C:  CLRF   05
....................    while(TRUE) { 
....................       if (bit_test(PORTD, 0)) { 
004E:  BTFSS  F83.0
0050:  BRA    0062
....................          PORTB ^= i; 
0052:  MOVF   05,W
0054:  XORWF  F81,F
....................          if (i>0) 
0056:  MOVF   05,F
0058:  BZ    005C
....................             i--; 
005A:  DECF   05,F
....................          PORTB ^= i; 
005C:  MOVF   05,W
005E:  XORWF  F81,F
....................          //output_low(PIN_B0);             
....................       } 
0060:  BRA    0072
....................       else { 
....................          PORTB ^= i; 
0062:  MOVF   05,W
0064:  XORWF  F81,F
....................          if (i<255) 
0066:  INCFSZ 05,W
0068:  BRA    006C
006A:  BRA    006E
....................             i++; 
006C:  INCF   05,F
....................          PORTB ^= i; 
006E:  MOVF   05,W
0070:  XORWF  F81,F
....................       } 
....................          //output_high(PIN_B0); 
....................       delay_ms(1000); 
0072:  MOVLW  04
0074:  MOVWF  06
0076:  MOVLW  FA
0078:  MOVWF  07
007A:  BRA    0004
007C:  DECFSZ 06,F
007E:  BRA    0076
0080:  BRA    004E
....................    } 
.................... } 
....................  
0082:  SLEEP 
.................... void push_button(void { // Synartisi elegxou patimatos-apeleftherosis tou BUTTON 
....................    while (input(PIN_B4) == 1) {} // To PORT kai to PIN mporoun na allaksoun analoga tin anagki 
....................    delay_ms(50); 
....................    while (input(PIN_B4) == 0) {} // To PORT kai to PIN mporoun na allaksoun analoga tin anagki 
....................    delay_ms(50);    
.................... } 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
