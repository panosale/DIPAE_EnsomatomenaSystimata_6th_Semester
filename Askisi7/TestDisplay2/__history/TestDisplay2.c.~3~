#include <main_.h>

//========================== 
// Standard Eisodoi & Eksodoi
//#use standard_io (A)
//#use standard_io (C)

//========================== 
// Orismos ton thiron me ti thesi tous sti mnimi
#byte PORTB =0xF81
#byte PORTD =0xF83

//========================== 
// INPUTS
#define sw1 (PORTD & 0x01)
#define sw2 ((PORTD & 0x02) > )
#define sw3 ((PORTD & 0x04) > )
#define sw4 ((PORTD & 0x08) > )
#define sw5 ((PORTD & 0x10) > )
#define sw6 ((PORTD & 0x20) > )
#define sw7 ((PORTD & 0x40) > )
#define sw8 ((PORTD & 0x80) > )

//==========================
// LCD PIN definition
#define LCD_RS PIN_B2
#define LCD_EN PIN_B3
#define LCD_D0 PIN_B4
#define LCD_D1 PIN_B5 
#define LCD_D2 PIN_B6 
#define LCD_D3 PIN_B7

//========================== 
// LCD commands
#define LINE_1 0x00 
#define LINE_2 0x40 
#define CLEAR_DISP 0x01

//========================== 
// Variables definition
int i = 0;

//========================== 
// Function definition
void LCD_Init(void); 
void lcd_message(void); 
void LCD_SetPosition(unsigned int cX);
void LCD_PutChar(unsigned int cX);
void LCD_PutCmd(unsigned int cX);
void LCD_PulseEnable(void);
void LCD_SetData(unsigned int cX);
void pic_init(void);

//========================== 
// Main program
void main() {
   pic_init();
   lcd_init();
   lcd_message();
   while(TRUE) {
      if (sw1 == 0) {
         LCD_SetPosition(LINE_1 + 1);
         printf(LCD_PutChar, "SW1 ON ");
      }
      else {
         LCD_SetPosition(LINE_1 + 1);
         printf(LCD_PutChar, "SW1 OFF ");      
      }
      if (!sw2) {
         LCD_SetPosition(LINE_1 + 9);
         printf(LCD_PutChar, "SW2 ON ");
      }
      else {
         LCD_SetPosition(LINE_1 + 9);
         printf(LCD_PutChar, "SW2 OFF ");      
      }
      if (!(sw3)) {
         LCD_SetPosition(LINE_2 + 1);
         printf(LCD_PutChar, "SW3 ON ");
      }
      else {
         LCD_SetPosition(LINE_2 + 1);
         printf(LCD_PutChar, "SW3 OFF ");      
      }
      if (!(sw4)) {
         LCD_SetPosition(LINE_2 + 9);
         printf(LCD_PutChar, "SW4 ON ");
      }
      else {
         LCD_SetPosition(LINE_2 + 9);
         printf(LCD_PutChar, "SW4 OFF ");      
      }
      delay_ms(1000);
      if (!(sw5)) {
         LCD_SetPosition(LINE_1 + 1);
         printf(LCD_PutChar, "SW5 ON ");
      }
      else {
         LCD_SetPosition(LINE_1 + 1);
         printf(LCD_PutChar, "SW5 OFF ");      
      }
      if (!(sw6)) {
         LCD_SetPosition(LINE_1 + 9);
         printf(LCD_PutChar, "SW6 ON ");
      }
      else {
         LCD_SetPosition(LINE_1 + 9);
         printf(LCD_PutChar, "SW6 OFF ");      
      }
      if (!(sw7)) {
         LCD_SetPosition(LINE_2 + 1);
         printf(LCD_PutChar, "SW7 ON ");
      }
      else {
         LCD_SetPosition(LINE_2 + 1);
         printf(LCD_PutChar, "SW7 OFF ");      
      }
      if (!(sw8)) {
         LCD_SetPosition(LINE_2 + 9);
         printf(LCD_PutChar, "SW8 ON ");
      }
      else {
         LCD_SetPosition(LINE_2 + 9);
         printf(LCD_PutChar, "SW8 OFF ");      
      }
      delay_ms(1000);
   }
}

//------------------------------------
//send a nibble to lcd
//------------------------------------
void lcd_send_nibble(int8 nibble) { 
// Note: !! converts an integer expression to a boolean (1 or 0). 
   output_bit(LCD_DB4, !!(nibble & 1)); 
   output_bit(LCD_DB5, !!(nibble & 2)); 
   output_bit(LCD_DB6, !!(nibble & 4)); 
   output_bit(LCD_DB7, !!(nibble & 8));
   delay_cycles(20); 
   output_high(LCD_E); 
   delay_us(50);
   output_low(LCD_E);
}

//----------------------------------
// Send a byte to the LCD.
//----------------------------------
void lcd_send_byte(int8 address, int8 n) {
   output_low(LCD_RS);
   if (address)
      output_high(LCD_RS);
   else
      output_low(LCD_RS);
   delay_cycles(10);
   output_low(LCD_E);
   lcd_send_nibble(n >> 4);
   lcd_send_nibble(n & 0xf);
}

//---------------------------
// Init lcd
//---------------------------
void lcd_init(void) {
   int8 i;
   output_low(LCD_RS);
   output_low(LCD_E);
   delay_ms(200);
   for(i = 0 ;i < 3; i++) {
      lcd_send_nibble(0x03);
      delay_ms(10); 
   }
   lcd_send_nibble(0x02);
   for (i = 0; i < sizeof(LCD_INIT_STRING); i++) {
      lcd_send_byte(0, LCD_INIT_STRING[i]);
      delay_ms(10);
   }
}

//--------------------------
//Set cursor position 
//--------------------------
void lcd_gotoxy(int8 x, int8 y) {
   int8 address;
   if(y != 1)
      address = lcd_line_two;
   else
      address = 0;
   address += x-1;
   lcd_send_byte(0, 0x80 | address);
}

//----------------------------
// Send a char to lcd
//-----------------------------
void lcd_putc(char c) {
   switch(c) {
      case '\f':
         // Added by Alevr for tests - START
         PORTD = 0b00000001;
         delay_ms(100);
         // Added by Alevr for tests - END
         lcd_send_byte(0,1);
         delay_ms(4);
      break;
      case '\n':
         // Added by Alevr for tests - START
         PORTD = 0b00000010;
         delay_ms(100);
         // Added by Alevr for tests - END
         lcd_gotoxy(1,2); 
      break;
      case '\b':
         // Added by Alevr for tests - START
         PORTD = 0b00000100;
         delay_ms(100);
         // Added by Alevr for tests - END
         lcd_send_byte(0, 0x10);
      break;
      default:
         // Added by Alevr for tests - START
         PORTD = 0b00001000;
         delay_ms(100);
         // Added by Alevr for tests - END
         lcd_send_byte(1, c);
      break;
   }
}
