#include <main_.h>
//========================== 
// flex_lcd.c
//==========================
// Standard Eisodoi & Eksodoi
#use standard_io (A)
//#use standard_io (B)
#use standard_io (C)

// Orismos ton thiron me ti thesi tous sti mnimi
#byte PORTA =0xF80
//#byte PORTB =0xF81
#byte PORTC =0xF82
#byte PORTD =0xF83
#byte PORTE =0xF84

#define LCD_DB4 PIN_B4
#define LCD_DB5 PIN_B5 
#define LCD_DB6 PIN_B6 
#define LCD_DB7 PIN_B7

#define LCD_E PIN_B3 
#define LCD_RS PIN_B2 
#define LCD_RW PIN_B1
//========================================
#define lcd_type 2 // 0=5x7, 1=5x10, 2=2 lines 
#define lcd_line_two 0x40 // LCD RAM address for the 2nd line

int8 const LCD_INIT_STRING[4] = {
   0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x7 dots 
   0xc, // Display on
   1, // Clear display
   6 // Increment cursor
}; 

// Function definition
void lcd_send_nibble(int8 nibble); 
void lcd_send_byte(int8 address, int8 n); 
void lcd_init(void);
void lcd_gotoxy(int8 x, int8 y); 
void lcd_putc(char c);

//========================== 
// Main program
//==========================
void main() {
   // Added by Alevr for tests - START
   set_tris_d(0x00); // Orismos tou PORTD san eksodo (0)
   PORTD = 7;
   //delay_ms(10000);
   // Added by Alevr for tests - END
   int8 i=0;
   lcd_init(); //
   lcd_putc("\f MicroII Lab\n"); 
   lcd_putc("LCD test program");
   delay_ms(2000);
   lcd_putc(" \n"); 
   for(i=0; i<16; i++) {
      delay_ms(500); 
      lcd_putc(" \b"); 
      PORTD = i;
   }
   while(TRUE);
}

//------------------------------------
//send a nibble to lcd
//------------------------------------
void lcd_send_nibble(int8 nibble) { 
// Note: !! converts an integer expression to a boolean (1 or 0). 
   output_bit(LCD_DB4, !!(nibble & 1)); 
   output_bit(LCD_DB5, !!(nibble & 2)); 
   output_bit(LCD_DB6, !!(nibble & 4)); 
   output_bit(LCD_DB7, !!(nibble & 8));
   delay_cycles(20); 
   output_high(LCD_E); 
   delay_us(50);
   output_low(LCD_E);
}

//----------------------------------
// Send a byte to the LCD.
//----------------------------------
void lcd_send_byte(int8 address, int8 n) {
   output_low(LCD_RS);
   if (address)
      output_high(LCD_RS);
   else
      output_low(LCD_RS);
   delay_cycles(10);
   output_low(LCD_E);
   lcd_send_nibble(n >> 4);
   lcd_send_nibble(n & 0xf);
}

//---------------------------
// Init lcd
//---------------------------
void lcd_init(void) {
   int8 i;
   output_low(LCD_RS);
   output_low(LCD_E);
   delay_ms(200);
   for(i = 0 ;i < 3; i++) {
      lcd_send_nibble(0x03);
      delay_ms(10); 
   }
   lcd_send_nibble(0x02);
   for (i = 0; i < sizeof(LCD_INIT_STRING); i++) {
      lcd_send_byte(0, LCD_INIT_STRING[i]);
      delay_ms(10);
   }
}

//--------------------------
//Set cursor position 
//--------------------------
void lcd_gotoxy(int8 x, int8 y) {
   int8 address;
   if(y != 1)
      address = lcd_line_two;
   else
      address = 0;
   address += x-1;
   lcd_send_byte(0, 0x80 | address);
}

//----------------------------
// Send a char to lcd
//-----------------------------
void lcd_putc(char c) {
   switch(c) {
      case '\f':
         // Added by Alevr for tests - START
         PORTD = 0b00000001;
         delay_ms(100);
         // Added by Alevr for tests - END
         lcd_send_byte(0,1);
         delay_ms(4);
      break;
      case '\n':
         // Added by Alevr for tests - START
         PORTD = 0b00000010;
         delay_ms(100);
         // Added by Alevr for tests - END
         lcd_gotoxy(1,2); 
      break;
      case '\b':
         // Added by Alevr for tests - START
         PORTD = 0b00000100;
         delay_ms(100);
         // Added by Alevr for tests - END
         lcd_send_byte(0, 0x10);
      break;
      default:
         // Added by Alevr for tests - START
         PORTD = 0b00001000;
         delay_ms(100);
         // Added by Alevr for tests - END
         lcd_send_byte(1, c);
      break;
   }
}
