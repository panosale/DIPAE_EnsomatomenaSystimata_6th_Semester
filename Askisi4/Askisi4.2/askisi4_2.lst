CCS PCH C Compiler, Version 5.011, 5967               02-Απρ-25 00:29

               Filename:   F:\Common\Programming\GitHub\DIPAE_EnsomatomenaSystimata_6th_Term\Askisi4\Askisi4.2\askisi4_2.lst

               ROM used:   292 bytes (1%)
                           Largest free fragment is 32472
               RAM used:   27 (1%) at main() level
                           27 (1%) worst case
               Stack used: 2 locations (1 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   00FC
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.5
004A:  GOTO   0054
004E:  BTFSC  FF2.2
0050:  GOTO   0096
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // DIPAE - Enosmatomena Systimata - 6o Eksamino 
.................... // Alevropoulos Panagiotis 
.................... // AM: 2022005 
.................... // Askisi 4 - Test timer 
.................... #include <main_.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... //#FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#build (reset=0x800, interrupt=0x808) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#org 0, 0x7FF {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
....................  
.................... #use standard_io (A) // Standard Eisodoi & Eksodoi 
.................... #use standard_io (B) // Standard Eisodoi & Eksodoi 
.................... #use standard_io (C) // Standard Eisodoi & Eksodoi 
....................  
.................... #byte PORTA =0xF80 // Orismos ton thiron me ti thesi tous sti mnimi 
.................... #byte PORTB =0xF81 // Orismos ton thiron me ti thesi tous sti mnimi 
.................... #byte PORTC =0xF82 // Orismos ton thiron me ti thesi tous sti mnimi 
.................... #byte PORTD =0xF83 // Orismos ton thiron me ti thesi tous sti mnimi 
.................... #byte PORTE =0xF84 // Orismos ton thiron me ti thesi tous sti mnimi 
....................  
.................... const int8 RB7_init_val_counter = 2; 
.................... const int8 RB6_init_val_counter = 5; 
.................... const int8 RB5_init_val_counter = 10; 
.................... const int8 RB4_init_val_counter = 20; 
.................... const int8 RB3_init_val_counter = 80; 
.................... const int16 timer_start_value = 0; // Orismos arxikis timis timer0; 
....................  
.................... int8 RB7_counter = RB7_init_val_counter; // Led on RB7 counter 
.................... int8 RB6_counter = RB6_init_val_counter; // Led on RB6 counter 
.................... int8 RB5_counter = RB5_init_val_counter; // Led on RB5 counter 
.................... int8 RB4_counter = RB4_init_val_counter; // Led on RB4 counter 
.................... int8 RB3_counter = RB3_init_val_counter; // Led on RB3 counter 
....................  
.................... // Dilosi sinartiseon eksipiretisis 
.................... void timer0_int(void); 
.................... void ext_int1(void); 
.................... void init(void); 
....................  
.................... void main() 
*
00FC:  CLRF   FF8
00FE:  BCF    FD0.7
0100:  BSF    07.7
0102:  MOVLW  02
0104:  MOVWF  16
0106:  MOVLW  05
0108:  MOVWF  17
010A:  MOVLW  0A
010C:  MOVWF  18
010E:  MOVLW  14
0110:  MOVWF  19
0112:  MOVLW  50
0114:  MOVWF  1A
0116:  MOVF   FC1,W
0118:  ANDLW  C0
011A:  IORLW  0F
011C:  MOVWF  FC1
011E:  MOVLW  07
0120:  MOVWF  FB4
.................... { 
....................    init(); 
0122:  BRA    00E6
....................    while (TRUE) { 
0124:  BRA    0124
....................    } 
.................... }    
....................  
.................... #INT_TIMER0 
.................... void timer0_int(void) { 
0126:  SLEEP 
....................    set_timer0(timer_start_value); 
*
0096:  CLRF   FD7
0098:  CLRF   FD6
....................    // Led on RB7 flashing 
....................    RB7_counter--; 
009A:  DECF   16,F
....................    if (RB7_counter == 0) { 
009C:  MOVF   16,F
009E:  BNZ   00A8
....................       PORTB = PORTB ^ 0b10000000; 
00A0:  MOVLW  80
00A2:  XORWF  F81,F
....................       RB7_counter = RB7_init_val_counter; 
00A4:  MOVLW  02
00A6:  MOVWF  16
....................    } 
....................    // Led on RB6 flashing 
....................    RB6_counter--; 
00A8:  DECF   17,F
....................    if (RB6_counter == 0) { 
00AA:  MOVF   17,F
00AC:  BNZ   00B6
....................       PORTB = PORTB ^ 0b01000000; 
00AE:  MOVLW  40
00B0:  XORWF  F81,F
....................       RB6_counter = RB6_init_val_counter; 
00B2:  MOVLW  05
00B4:  MOVWF  17
....................    } 
....................    // Led on RB5 flashing 
....................    RB5_counter--; 
00B6:  DECF   18,F
....................    if (RB5_counter == 0) { 
00B8:  MOVF   18,F
00BA:  BNZ   00C4
....................       PORTB = PORTB ^ 0b00100000; 
00BC:  MOVLW  20
00BE:  XORWF  F81,F
....................       RB5_counter = RB5_init_val_counter; 
00C0:  MOVLW  0A
00C2:  MOVWF  18
....................    } 
....................    // Led on RB4 flashing 
....................    RB4_counter--; 
00C4:  DECF   19,F
....................    if (RB4_counter == 0) { 
00C6:  MOVF   19,F
00C8:  BNZ   00D2
....................       PORTB = PORTB ^ 0b00010000; 
00CA:  MOVLW  10
00CC:  XORWF  F81,F
....................       RB4_counter = RB4_init_val_counter; 
00CE:  MOVLW  14
00D0:  MOVWF  19
....................    } 
....................    // Led on RB3 flashing 
....................    RB3_counter--; 
00D2:  DECF   1A,F
....................    if (RB3_counter == 0) { 
00D4:  MOVF   1A,F
00D6:  BNZ   00E0
....................       PORTB = PORTB ^ 0b00001000; 
00D8:  MOVLW  08
00DA:  XORWF  F81,F
....................       RB3_counter = RB3_init_val_counter; 
00DC:  MOVLW  50
00DE:  MOVWF  1A
....................    } 
....................     
00E0:  BCF    FF2.2
00E2:  GOTO   0054
.................... } 
....................  
.................... void init(void) { 
....................    set_tris_b(0x00); // Orismos tou PORTB san eksodo (0) 
00E6:  MOVLW  00
00E8:  MOVWF  F93
....................    SETUP_TIMER_0(T0_INTERNAL | T0_DIV_2); 
00EA:  MOVLW  80
00EC:  MOVWF  FD5
....................    set_timer0(timer_start_value); 
00EE:  CLRF   FD7
00F0:  CLRF   FD6
....................    enable_interrupts(INT_TIMER0); 
00F2:  BSF    FF2.5
....................    enable_interrupts(GLOBAL); // Energopoiisi genikou diakopti diakopon 
00F4:  MOVLW  C0
00F6:  IORWF  FF2,F
00F8:  GOTO   0124 (RETURN)
.................... } 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
